#!/bin/bash

DEFAULT_TTB_COMMAND=${DEFAULT_TTB_COMMAND:-"test"}
SCRIPT_NAME=`basename "${BASH_SOURCE[0]}"`
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SOLR_CONTAINER=tellusr_solr
TELLUSR_VERSION=${TELLUSR_VERSION:-"latest"}

## Some default project config variables
PROJECT=default
PROJECT_HOME=.
if [ -f "./tellusr.env" ]; then
    PROJECT_HOME=`realpath "."`
elif [ -f "../tellusr.env" ]; then
    PROJECT_HOME=`realpath ".."`
elif [ -f "../../tellusr.env" ]; then
    PROJECT_HOME=`realpath "../.."`
elif [ -f "../../../tellusr.env" ]; then
    PROJECT_HOME=`realpath "../../.."`
fi
SOLR_CONFIG_DIR=$PROJECT_HOME/configset
SOLR_HOST="localhost"
BUILD_ROOT=$PROJECT_HOME

SOLR_PORT=${SOLR_PORT:-"8983"}

## Load local overrides for config variables
source "$PROJECT_HOME/tellusr.env"

# Some test scripts may want to override the configured solr port to be
# able to launch multiple solr instances in a cluster
SOLR_PORT=${SOLR_PORT_OVERRIDE:-"$SOLR_PORT"}

SOLR_DATA_VOLUME=${SOLR_DATA_VOLUME:-"tellusr_solr_${PROJECT}_data_${SOLR_PORT}"}
TELLUSR_RUN_PARAMS="-DzkRun"

## Docker on MacOS does not support --network=host, compensate
if [[ "$OSTYPE" == "darwin"* ]]
then
    LOCALHOST="host.docker.internal"
    TELLUSR_RUN_HOST_OPTIONS=""
else
    LOCALHOST="localhost"
    TELLUSR_RUN_HOST_OPTIONS="--network=host"
fi
TELLUSR_RUN_MODE_OPTIONS="--rm"

## Check if docker command needs to be run as sudo

function trace {
    set -x
    $@
    { set +x; } 2> /dev/null
}

function assume_docker() {
  # Ask user to install docker if not yet installed
  if [ ! "$(command -v docker)" ]; then
    echo -n "No docker installation was found on this system."
    case "$OSTYPE" in
    linux-gnu*)
      echo "On ubuntu you can install docker thus:"
      echo "  sudo apt install docker.io"
      echo "  sudo usermod -aG docker $USER"
      ;;
    darwin*)
      echo "Installation instructions for macs are located at:"
      echo "  https://docs.docker.com/docker-for-mac/install/"
      ;;
    *)
      echo
      ;;
    esac
    # If Docker isn't installed, we cannot go on, so abort the script:
    exit 2
  fi
  DOCKER=$(docker ps &> /dev/null && echo "docker" || echo "sudo docker")
}

function assume_configset() {
    if [ ! -d $SOLR_CONFIG_DIR ]
    then
        echo "Please create a core with 'bin/ttb create <collection name>'"
        exit 3
    fi
}

function run {
    let ZOOKEEPER_PORT=SOLR_PORT+1000
    $DOCKER volume rm tellusr_solr_test_data 2> /dev/null || echo -n
    trace $DOCKER run \
          -d \
          ${TELLUSR_RUN_HOST_OPTIONS} \
          ${TELLUSR_RUN_MODE_OPTIONS} \
          ${TELLUSR_RUN_OPTIONS} \
          -p ${SOLR_PORT} \
          -p ${ZOOKEEPER_PORT} \
          -e ZOOKEEPER_ID=${ZOOKEEPER_ID:-"1"} \
          -e SOLR_HEAP=${SOLR_HEAP:-"4096m"} \
          -e TELLUSR_CENTRAL_URL=${CENTRAL_URL:-"http://${LOCALHOST}:${CENTRAL_PORT:-"8989"}"} \
          -e SOLR_DISABLE_SECURITY_JSON="true" \
          -e SOLR_PORT=$SOLR_PORT \
          -v ${SOLR_DATA_VOLUME}:/var/solr \
          -v $BUILD_ROOT/configset:/setup/configset \
          --log-driver none \
          --name ${SOLR_CONTAINER}_${SOLR_PORT} \
          tellusr/demo:${TELLUSR_VERSION} $TELLUSR_RUN_PARAMS
    sleep 1
}


function migrate_data_default {
    # Put files named "${COLLECTION}_data.json" or "${COLLECTION}_tiny_data.json"
    # in a subdirectory named test_data to use this auto import. The *_tiny_data.json
    # files are by convention a small subset that you can commit into your repository.
    # *_data.json are larger datasets that you might not want to put into version control

    if [[ ! -d $PROJECT_HOME/test_data ]]
    then
        echo "No directory test_data. Skipping data migration"
        return
    fi
    
    echo "Migrating data"
    SERVER="$SOLR_HOST:$SOLR_PORT"
    CORES=$(find $BUILD_ROOT/configset/* -maxdepth 0 -type d -printf "%f ")

    pushd $PROJECT_HOME/test_data
    for CORE in $CORES
    do
        FILE=""
        if [[ -f "${CORE}_data.json" ]]
        then
            FILE="${CORE}_data.json"
        elif [[ -f "${CORE}_data_tiny.json" ]]
        then
            FILE="${CORE}_data_tiny.json"
        else
            continue
        fi
        curl -X POST -H 'Content-Type: application/json' "http://${SERVER}/solr/$CORE/update?commit=true" --data-binary @$FILE
    done
    popd
}

function _migrate_data {
    ## Check if migrate_data function is defined in tellusr.env, and if so run it
    if [ declare -F "migrate_data" &> /dev/null ]
    then
	migrate_data $1 $2
    else
        migrate_data_default $1 $2
    fi
}

function volume_drop {
    echo -n "Dropping volume: "
    $DOCKER volume rm ${SOLR_DATA_VOLUME}
}

function migrate {
    wait_for_solr
    echo -n "Attached to: "
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} create_collections.sh
    _migrate_data $SOLR_HOST $PORT
}

function demo_migrate {
    wait_for_solr
    echo -n "Attached to: "
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} demo_migrate.sh
}

function console {
    $DOCKER exec -it ${SOLR_CONTAINER}_${SOLR_PORT} bash
}


function stop {
    CONTAINER=${SOLR_CONTAINER}_${SOLR_PORT}
    if [ "$($DOCKER ps -q -f name="${CONTAINER}")" ]; then
        echo -n "Stopping: "
        $DOCKER stop "${CONTAINER}"
    fi
}

function wait_for_solr {
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} wait-for-solr.sh
}


function wait_for_zookeeper {
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} wait-for-zookeeper.sh
}



function echo_zoo_cfg {
    cat <<EOSCRIPT
# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial
# synchronization phase can take
initLimit=100
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=5
dataDir=/var/solr/data/zoo_data
# clientPort=2181

# admin.enableServer=false
server.1=localhost:2888:3888
server.2=localhost:2889:3889
server.3=localhost:2890:3890
EOSCRIPT
}


function create {
    NEW_COLLECTION=$1
    TELLUSR_RUN_PARAMS=""
    mkdir -p $BUILD_ROOT/configset
    run
    mkdir -p $BUILD_ROOT/configset/$NEW_COLLECTION/
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} solr create_core -c $NEW_COLLECTION
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} /opt/tellusr/bin/append_snippet.sh $NEW_COLLECTION
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} cp /opt/tellusr/resources/elevate.xml /var/solr/data/$NEW_COLLECTION/conf
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} cp /opt/tellusr/resources/synonyms.txt /var/solr/data/$NEW_COLLECTION/conf
    trace $DOCKER cp ${SOLR_CONTAINER}_${SOLR_PORT}:/var/solr/data/$NEW_COLLECTION/conf $BUILD_ROOT/configset/$NEW_COLLECTION/conf
    stop
    volume_drop
}


function pull {
    if [[ "$TELLUSR_VERSION" -eq "latest" ]]
    then
        $DOCKER pull tellusr/demo:$TELLUSR_VERSION
    fi
    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    git pull origin $GIT_BRANCH
}


function update {
    COLLECTION=$1
    let ZOOKEEPER_PORT=SOLR_PORT+1000
    echo "Updating collection $COLLECTION"
    trace $DOCKER exec -t "${SOLR_CONTAINER}_${SOLR_PORT}" zkcli.sh -zkhost "localhost:${ZOOKEEPER_PORT}" -cmd upconfig -confname "${COLLECTION}" -confdir "/setup/configset/${COLLECTION}/conf/"
    trace curl "http://localhost:${SOLR_PORT}/solr/admin/collections?action=RELOAD&name=${COLLECTION}"
}

function update_all {
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} update_collections.sh
}


function die {
    echo $1
    exit 1
}


function install {
    run
    migrate
    $DOCKER cp $PROJECT_HOME/zoo.cfg ${SOLR_CONTAINER}_${SOLR_PORT}:/var/solr/data/zoo.cfg
    $DOCKER exec -u 0 -t ${SOLR_CONTAINER}_${SOLR_PORT} chown solr.solr /var/solr/data/zoo.cfg
    stop
}

function help {
    CMD=${BASH_SOURCE[0]}
    echo "$CMD volume_drop run migrate pull update demo_migrate console stop"
    echo "$CMD test|test_cloud|demo"
}


# Check that docker is installed
assume_docker

# Default command
if [ "$#" == "0" ]; then
    set -- $DEFAULT_TTB_COMMAND
fi

# Multiple commands
while (( "$#" ))
do
    ARG="$1" && shift || die "Missing argument"
    case $ARG in
        uninstall)
            SOLR_DATA_VOLUME=${INSTALL_SOLR_DATA_VOLUME:-$SOLR_DATA_VOLUME}
            stop
            $DOCKER rm "${SOLR_CONTAINER}_${SOLR_PORT}"
            volume_drop
            ;;
        
        install)
            if [[ -e zoo.cfg ]]
            then
                export ZOOKEEPER_ID="$1" && shift || die "Cloud mode needs a zookeeper id"
                [[ $ZOOKEEPER_ID =~ ^[0-9]+ ]] || die "Zookeeper id '$ZOOKEEPER_ID' should be and integer"
                echo_zoo_cfg | grep -v 'server.' > $PROJECT_HOME/configset/zoo.cfg
                echo "server.${ZOOKEEPER_ID}=localhost:2888:3888" >> $PROJECT_HOME/configset/zoo.cfg
            fi
            SOLR_DATA_VOLUME=${INSTALL_SOLR_DATA_VOLUME:-$SOLR_DATA_VOLUME}
            install
            rm $PROJECT_HOME/configset/zoo.cfg
            ;;

        tellusr_install)
            curl -s https://dist.tellusr.com/tellusr.sh | bash -s upgrade
            ;;

        create)
            NEW_COLLECTION="$1" && shift || die "Create needs a new core name"
            create $NEW_COLLECTION
            ;;

        update)
            assume_configset
            COLLECTION="$1" && shift || die "Update needs a collection name"
            update $COLLECTION
            ;;
        
        update_all)
            assume_configset
            update_all
            ;;
        
        pull)
            pull
            ;;
        
	run)
            assume_configset
	    run
	    ;;

	prod_run)
            SOLR_DATA_VOLUME=${INSTALL_SOLR_DATA_VOLUME:-$SOLR_DATA_VOLUME}
            if [ -n "$INSTALL_CENTRAL_URL" ]
            then
                CENTRAL_URL="$INSTALL_CENTRAL_URL"
            fi
            TELLUSR_RUN_MODE_OPTIONS="--restart=always"
	    run
	    ;;

	stop)
	    stop
	    ;;

	migrate)
	    migrate
	    ;;

	demo_migrate)
	    demo_migrate
	    ;;

	console)
	    console
	    ;;

	volume_drop)
	    volume_drop
	    ;;

	wait_for_solr)
            wait_for_solr
	    ;;

	demo)
            volume_drop
	    run
            migrate
            demo_migrate
            console
            stop
	    ;;

	test)
            assume_configset
            volume_drop
	    run
            wait_for_solr
            migrate
            console
            stop
	    ;;

	test_cloud)
            assume_configset
            echo "Project: $PROJECT"
            mkdir -p configset
            echo_zoo_cfg > $PROJECT_HOME/configset/zoo.cfg
            export TELLUSR_RUN_PARAMS="-DzkRun"
            let SOLR_PORT2=SOLR_PORT+1
            let SOLR_PORT3=SOLR_PORT+2
            ENV2="env SOLR_PORT_OVERRIDE=$SOLR_PORT2 ZOOKEEPER_ID=2"
            ENV3="env SOLR_PORT_OVERRIDE=$SOLR_PORT3 ZOOKEEPER_ID=3"
            CMD=${BASH_SOURCE[0]}
            stop; $ENV2 $CMD stop; $ENV3 $CMD stop
            volume_drop; $ENV2 $CMD volume_drop; $ENV3 $CMD volume_drop
            run; $ENV2 $CMD run; $ENV3 $CMD run
            migrate
            console
            stop; $ENV2 $CMD stop; $ENV3 $CMD stop
            rm $PROJECT_HOME/configset/zoo.cfg
	    ;;

        help)
            help
            ;;
        *)
            echo "Unrecoginzed command $ARG"
            help
            exit 1
            ;;
    esac
done
