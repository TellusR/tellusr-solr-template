#!/bin/bash

SCRIPT_NAME=`basename "${BASH_SOURCE[0]}"`
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SOLR_CONTAINER=tellusr_solr
TELLUSR_VERSION=${TELLUSR_VERSION:-"latest"}

## Some default project config variables
PROJECT=default
PROJECT_DIR=.
if [ -f "./tellusr.env" ]; then
    PROJECT_DIR=`realpath "."`
elif [ -f "../tellusr.env" ]; then
    PROJECT_DIR=`realpath ".."`
elif [ -f "../../tellusr.env" ]; then
    PROJECT_DIR=`realpath "../.."`
elif [ -f "../../../tellusr.env" ]; then
    PROJECT_DIR=`realpath "../../.."`
fi
SOLR_CONFIG_DIR=$PROJECT_DIR/configset
SOLR_HOST="localhost"
SOLR_DATA_VOLUME="tellusr_solr_${PROJECT}_data"
BUILD_ROOT=$PROJECT_DIR


## Load local overrides for config variables
source "$PROJECT_DIR/tellusr.env"

SOLR_PORT=${SOLR_PORT:-"8983"}


## Docker on MacOS does not support --network=host, compensate
if [[ "$OSTYPE" == "darwin"* ]]
then
    LOCALHOST="host.docker.internal"
    TELLUSR_RUN_OPTIONS="--rm"
else
    LOCALHOST="localhost"
    TELLUSR_RUN_OPTIONS="--network=host --rm"
fi

## Check if docker command needs to be run as sudo
DOCKER=$(docker ps &> /dev/null && echo "docker" || echo "sudo docker")

function run {
    let ZOOKEEPER_PORT=SOLR_PORT+1000
    $DOCKER volume rm tellusr_solr_test_data 2> /dev/null || echo -n
    set -x
    $DOCKER run \
            -d ${TELLUSR_RUN_OPTIONS} \
            -p ${SOLR_PORT} \
            -p ${ZOOKEEPER_PORT} \
            -e ZOOKEEPER_ID=${ZOOKEEPER_ID:-"1"} \
            -e SOLR_HEAP=${SOLR_HEAP:-"3096m"} \
            -e TELLUSR_BACKEND_URL=${BACKEND_URL:-"http://$LOCALHOST:${BACKEND_PORT:-"8989"}"} \
            -e SOLR_DISABLE_SECURITY_JSON="true" \
            -e SOLR_PORT=$SOLR_PORT \
            -v ${SOLR_DATA_VOLUME}_${SOLR_PORT}:/var/solr \
            -v $BUILD_ROOT/configset:/setup/configset \
            --log-driver none \
            --name ${SOLR_CONTAINER}_${SOLR_PORT} \
            tellusr/demo:${TELLUSR_VERSION} -DzkRun $TELLUSR_RUN_PARAMS
    set +x
    sleep 1
}

function _migrate_data {
    ## Check if migrate_data function is defined in tellusr.env, and if so run it
    if [ _migrate_data_defined ]
    then
	migrate_data $1 $2
    fi
}

function volume_drop {
    echo -n "Dropping volume: "
    $DOCKER volume rm ${SOLR_DATA_VOLUME}_${SOLR_PORT}
    _migrate_data $SOLR_HOST $SOLR_PORT
}

function migrate {
    echo -n "Attached to: "
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} create_collections.sh
    _migrate_data $SOLR_HOST $PORT
}

function demo_migrate {
    echo -n "Attached to: "
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} demo_migrate.sh
}

function console {
    $DOCKER exec -it ${SOLR_CONTAINER}_${SOLR_PORT} bash
}


function stop {
    $DOCKER stop ${SOLR_CONTAINER}_${SOLR_PORT}
}


function help {
    CMD=${BASH_SOURCE[0]}
    echo "$CMD volume_drop run migrate demo_migrate console stop"
    echo "$CMD test|test_cloud|demo"
}


function die {
    echo $1
    exit 1
}

# Default command
if [ "$#" == "0" ]; then
    set -- test
fi

# Multiple commands
while (( "$#" ))
do
    ARG="$1" && shift || die "Missing argument"
    case $ARG in
	run)
	    run
	    ;;

	stop)
	    stop
	    ;;

	migrate)
	    migrate
	    ;;

	demo_migrate)
	    demo_migrate
	    ;;

	console)
	    console
	    ;;

	volume_drop)
	    volume_drop
	    ;;

	demo)
            volume_drop
	    run
            migrate
            demo_migrate
            console
            stop
	    ;;

	test)
            volume_drop
	    run
            migrate
            console
            stop
	    ;;

	test_cloud)
            let SOLR_PORT2=SOLR_PORT+1
            let SOLR_PORT3=SOLR_PORT+2
            ENV2="env SOLR_PORT=$SOLR_PORT2 ZOOKEEPER_ID=2"
            ENV3="env SOLR_PORT=$SOLR_PORT3 ZOOKEEPER_ID=3"
            TELLUSR_RUN_PARAMS="-DzkHost=127.0.0.0:9983,127.0.0.0:9984,127.0.0.0:9985"
            CMD=${BASH_SOURCE[0]}
            $ENV3 $CMD volume_drop
            $ENV3 $CMD run
            $ENV2 $CMD volume_drop
            $ENV2 $CMD run
            volume_drop
	    run
            sleep 10
            $ENV3 $CMD migrate
            #$ENV2 $CMD migrate
            #migrate
            console
            stop
            $ENV2 $CMD stop
            $ENV3 $CMD stop
	    ;;

        help)
            help
            ;;
        *)
            echo "Unrecoginzed command $ARG"
            help
            exit 1
            ;;
    esac
done
