#!/bin/bash

DEFAULT_TTB_COMMAND=${DEFAULT_TTB_COMMAND:-"help"}
SCRIPT_NAME=`basename "${BASH_SOURCE[0]}"`
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SOLR_CONTAINER=tellusr_solr
TELLUSR_VERSION=${TELLUSR_VERSION:-"latest"}
if [[ ${ZOOKEEPER_ID:-"1"} == "1" ]]
then
    # Some commands should only run on the main machine
    # if you are using the cloud command
    MAIN_CLIENT="true"
fi

# Used to avoid switching off tracing if the script is started with
# or if tracing is nested
if [[ $- == *x* ]]
then
    TRACE_LEVEL=1
else
    TRACE_LEVEL=0
fi

## Some default project config variables
PROJECT=default
PROJECT_PATH=.
if [ -f "./tellusr.env" ]; then
    PROJECT_PATH="."
elif [ -f "../tellusr.env" ]; then
    PROJECT_PATH=".."
elif [ -f "../../tellusr.env" ]; then
    PROJECT_PATH="../.."
elif [ -f "../../../tellusr.env" ]; then
    PROJECT_PATH="../../.."
elif [ -f "../../../../tellusr.env" ]; then
    PROJECT_PATH="../../../.."
elif [ -f "$SCRIPT_DIR/../tellusr.env" ]; then
    PROJECT_PATH="$SCRIPT_DIR/.."
fi
PROJECT_HOME="$( cd "${PROJECT_PATH}" >/dev/null 2>&1 && pwd )"

SOLR_CONFIG_DIR=$PROJECT_HOME/configset
SOLR_HOST="localhost"
BUILD_ROOT=$PROJECT_HOME

SOLR_PORT=${SOLR_PORT:-"8983"}

## Load local overrides for config variables
source "$PROJECT_HOME/tellusr.env"

# Some test scripts may want to override the configured solr port to be
# able to launch multiple solr instances in a cluster
SOLR_PORT=${SOLR_PORT_OVERRIDE:-"$SOLR_PORT"}

SOLR_DATA_VOLUME=${SOLR_DATA_VOLUME:-"tellusr_solr_${PROJECT}_data_${SOLR_PORT}"}
TELLUSR_RUN_PARAMS=${TELLUSR_RUN_PARAMS:-' -c'}
TELLUSR_RUN_EXTRA_VOLUMES=${TELLUSR_RUN_EXTRA_VOLUMES:-""}

## Docker on MacOS does not support --network=host, compensate
if [[ "$OSTYPE" == "darwin"* ]]
then
    LOCALHOST="host.docker.internal"
    TELLUSR_RUN_HOST_OPTIONS=""
else
    LOCALHOST="localhost"
    TELLUSR_RUN_HOST_OPTIONS="--network=host"
fi
TELLUSR_RUN_MODE_OPTIONS="-d --rm"


# Used to turn command tracing on for a single command or function
# Useful for showing parameters in docker commands
function trace {
    let TRACE_LEVEL=TRACE_LEVEL+1
    if [[ $TRACE_LEVEL = "1" ]]
    then
        set -x
        $@ 
        { set +x; } 2> /dev/null
    else
        $@
    fi
    let TRACE_LEVEL=TRACE_LEVEL-1
}

## Check if docker command needs to be run as sudo
function assume_docker {
  # Ask user to install docker if not yet installed
  if [ ! "$(command -v docker)" ]; then
    echo -n "No docker installation was found on this system."
    case "$OSTYPE" in
    linux-gnu*)
      echo "On ubuntu you can install docker thus:"
      echo "  sudo apt install docker.io"
      echo "  sudo usermod -aG docker $USER"
      ;;
    darwin*)
      echo "Installation instructions for macs are located at:"
      echo "  https://docs.docker.com/docker-for-mac/install/"
      ;;
    *)
      echo
      ;;
    esac
    # If Docker isn't installed, we cannot go on, so abort the script:
    exit 2
  fi
  DOCKER=$(docker ps &> /dev/null && echo "docker" || echo "sudo docker")
}

## Check if a configset is created. Tell user to create one if no
function assume_configset {
    if [ ! -d $SOLR_CONFIG_DIR ]
    then
        echo "Please create a core with 'bin/ttb create <collection name>'"
        exit 3
    fi
}

function run {
    if [[ -z "$ZOOKEEPER_PORT" ]]
    then
        let ZOOKEEPER_PORT=SOLR_PORT+1000
    fi

    trace $DOCKER run \
          ${TELLUSR_RUN_HOST_OPTIONS} \
          ${TELLUSR_RUN_MODE_OPTIONS} \
          ${TELLUSR_RUN_OPTIONS} \
          -p ${SOLR_PORT}:${SOLR_PORT} \
          -p ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT} \
          -e ZOOKEEPER_ID="${ZOOKEEPER_ID}" \
          -e SOLR_HEAP=${SOLR_HEAP:-"4096m"} \
          -e TELLUSR_CENTRAL_URL=${CENTRAL_URL:-"http://${LOCALHOST}:${CENTRAL_PORT:-"8989"}"} \
          -e SOLR_DISABLE_SECURITY_JSON="true" \
          -e SOLR_PORT=$SOLR_PORT \
          -e ZOOKEEPER_PORT=2181 \
          ${TELLUSR_RUN_EXTRA_ENV} \
          -v $BUILD_ROOT/configset:/setup/configset \
          ${TELLUSR_RUN_EXTRA_VOLUMES} \
          --log-driver none \
          --name ${SOLR_CONTAINER}_${SOLR_PORT} \
          tellusr/demo:${TELLUSR_VERSION} $TELLUSR_RUN_PARAMS
}


function zookeeper_run {
    if [[ -n "$ZOOKEEPER_ID" ]]
    then
        $DOCKER run \
           ${TELLUSR_RUN_HOST_OPTIONS} \
           ${TELLUSR_RUN_MODE_OPTIONS} \
           -e ZOO_4LW_COMMANDS_WHITELIST=mntr,conf,ruok \
           -e ZOO_LOG4J_PROP="INFO,ROLLINGFILE" \
           -e ZOO_MY_ID="${ZOOKEEPER_ID:-"1"}" \
           -e ZOO_SERVERS="${ZOO_SERVERS}" \
           $ZOO_VOLUMES \
           --name "tellusr_zookeeper_${ZOOKEEPER_PORT}" \
           zookeeper
    else
        $DOCKER run \
           ${TELLUSR_RUN_HOST_OPTIONS} \
           ${TELLUSR_RUN_MODE_OPTIONS} \
           -e ZOO_4LW_COMMANDS_WHITELIST=mntr,conf,ruok \
           -e ZOO_LOG4J_PROP="INFO,ROLLINGFILE" \
           $ZOO_VOLUMES \
           --name "tellusr_zookeeper_${ZOOKEEPER_PORT}" \
           zookeeper
    fi  
}


function prod_zookeeper_run {
    TELLUSR_RUN_MODE_OPTIONS="--restart=always -d"
    ZOO_SERVERS=${INSTALL_ZOO_SERVERS:-("localhost:2888:3888")}
    ZOO_VOLUMES="-v zookeeper_${ZOOKEEPER_PORT}_data:/data -v zookeeper_${ZOOKEEPER_PORT}_datalog:/datalog -v zookeeper_${ZOOKEEPER_PORT}_logs:/logs"
    trace zookeeper_run
}


function zookeeper_stop {
    CONTAINER="tellusr_zookeeper_${ZOOKEEPER_PORT}"
    if [ "$($DOCKER ps -q -f name="${CONTAINER}")" ]
    then
        echo -n "Stopping: "
        trace $DOCKER stop "${CONTAINER}"
    fi
    if [ "$($DOCKER ps -q -a -f name="${CONTAINER}")" ]
    then
        echo -n "Removing: "
        trace $DOCKER rm "${CONTAINER}"
    fi
}


function migrate_data_default {
    # Put files named "${COLLECTION}_data.json" or "${COLLECTION}_tiny_data.json"
    # in a subdirectory named test_data to use this auto import. The *_tiny_data.json
    # files are by convention a small subset that you can commit into your repository.
    # *_data.json are larger datasets that you might not want to put into version control

    if [[ ! -d $PROJECT_HOME/test_data ]]
    then
        echo "No directory test_data. Skipping data migration"
        return
    fi
    
    echo "Migrating data"
    SERVER="$SOLR_HOST:$SOLR_PORT"
    CORES=$(find $BUILD_ROOT/configset/* -maxdepth 0 -type d -printf "%f ")

    pushd $PROJECT_HOME/test_data
    for CORE in $CORES
    do
        FILE=""
        if [[ -f "${CORE}_data.json" ]]
        then
            FILE="${CORE}_data.json"
        elif [[ -f "${CORE}_data_tiny.json" ]]
        then
            FILE="${CORE}_data_tiny.json"
        else
            continue
        fi
        curl -X POST -H 'Content-Type: application/json' "http://${SERVER}/solr/$CORE/update?commit=true" --data-binary @$FILE
    done
    popd
}

function _migrate_data {
    ## Check if migrate_data function is defined in tellusr.env, and if so run it
    # if [ $(declare -F "migrate_data" &> /dev/null) ]
    if [ -n "$(LC_ALL=C type -t migrate_data)" ] && [ "$(LC_ALL=C type -t migrate_data)" = function ]
    then
	migrate_data $1 $2
    else
        migrate_data_default $1 $2
    fi
}

function stress_test {
    ## Check if migrate_data function is defined in tellusr.env, and if so run it
    if [ -n "$STRESS_TEST_COMMAND" ]
    then
        echo "Running stress test"
        trace docker exec -d tellusr_solr_8983 $STRESS_TEST_COMMAND
    elif [ -n "$STRESS_TEST_COMMANDS" ]
    then
         for COMMAND in "${STRESS_TEST_COMMANDS[@]}"
         do
             trace docker exec -d tellusr_solr_8983 "$COMMAND"
         done
    else
        echo "STRESS_TEST_COMMAND is not defined"
    fi
}

function volume_drop {
    if [ "$($DOCKER volume ls -q -f name="${SOLR_DATA_VOLUME}")" ]
    then
        echo -n "Dropping volume ${SOLR_DATA_VOLUME}: "
        $DOCKER volume rm ${SOLR_DATA_VOLUME}
    fi
}

function migrate {
    wait_for_solr || die "Solr is not up"
    echo -n "Attached to: "
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} create_collections.sh
    _migrate_data $SOLR_HOST $PORT
}


function demo_create_core {
    wait_for_solr
    echo -n "Attached to: "
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} demo_create_core.sh
}


function demo_migrate {
    wait_for_solr
    echo -n "Attached to: "
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} demo_migrate.sh
}

function console {
    $DOCKER exec -it ${SOLR_CONTAINER}_${SOLR_PORT} bash
}


function stop {
    local CONTAINER=${SOLR_CONTAINER}_${SOLR_PORT}
    if [ "$($DOCKER ps -q -f name="${CONTAINER}")" ]; then
        echo -n "Stopping: "
        $DOCKER stop "${CONTAINER}"
    fi
}

function wait_for_solr {
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} wait-for-solr.sh
}


function wait_for_zookeeper {
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} wait-for-zookeeper.sh
}



function echo_zoo_cfg {
    cat <<EOSCRIPT
# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial
# synchronization phase can take
initLimit=100
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=5
dataDir=/var/solr/data/zoo_data
clientPort=2181

# admin.enableServer=false
server.1=localhost:2888:3888;2181
# server.2=localhost:2889:3889
# server.3=localhost:2890:3890
EOSCRIPT
}


function create {
    NEW_COLLECTION=$1
    TELLUSR_RUN_PARAMS=""
    mkdir -p $BUILD_ROOT/configset
    run
    mkdir -p $BUILD_ROOT/configset/$NEW_COLLECTION/
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} solr create_core -c $NEW_COLLECTION
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} /opt/tellusr/bin/append_snippet.sh $NEW_COLLECTION
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} cp /opt/tellusr/resources/elevate.xml /var/solr/data/$NEW_COLLECTION/conf
    trace $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} cp /opt/tellusr/resources/synonyms.txt /var/solr/data/$NEW_COLLECTION/conf
    trace $DOCKER cp ${SOLR_CONTAINER}_${SOLR_PORT}:/var/solr/data/$NEW_COLLECTION/conf $BUILD_ROOT/configset/$NEW_COLLECTION/conf
    stop
    volume_drop
}


function git_pull {
    pushd $PROJECT_HOME
    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    git pull origin $GIT_BRANCH
    popd
}


function prod_run {
    SOLR_DATA_VOLUME=${INSTALL_SOLR_DATA_VOLUME:-$SOLR_DATA_VOLUME}
    TELLUSR_RUN_EXTRA_VOLUMES="-v ${SOLR_DATA_VOLUME}:/var/solr"
    TELLUSR_RUN_PARAMS="-c -z ${INSTALL_ZK_HOST}"
    
    if [ -n "$INSTALL_CENTRAL_URL" ]
    then
        CENTRAL_URL="$INSTALL_CENTRAL_URL"
    fi
    TELLUSR_RUN_MODE_OPTIONS="--restart=always -d"
    run
}



function prod_stop {
    CONTAINER=${SOLR_CONTAINER}_${SOLR_PORT}
    if [ "$($DOCKER ps -q -f name="${CONTAINER}")" ]
    then
        echo -n "Stopping: "
        $DOCKER stop "${CONTAINER}"
    fi
    if [ "$($DOCKER ps -q -a -f name="${CONTAINER}")" ]
    then
        echo -n "Removing: "
        $DOCKER rm "${CONTAINER}"
    fi
}


function docker_pull {
    $DOCKER pull tellusr/demo:$TELLUSR_VERSION
}


function update {
    COLLECTION=$1
    if [[ -z "$ZOOKEEPER_PORT" ]]
    then
        let ZOOKEEPER_PORT=SOLR_PORT+1000
    fi

    echo "Updating collection $COLLECTION"
    # trace $DOCKER exec -t "${SOLR_CONTAINER}_${SOLR_PORT}" solr zk upconfig  -z localhost:2181 -n $COLLECTION -d "/setup/configset/${COLLECTION}/conf/"

    trace $DOCKER exec -t "${SOLR_CONTAINER}_${SOLR_PORT}" zkcli.sh -zkhost "localhost:${ZOOKEEPER_PORT}" -cmd upconfig -confname "${COLLECTION}" -confdir "/setup/configset/${COLLECTION}/conf/"
    trace curl "http://localhost:${SOLR_PORT}/solr/admin/collections?action=RELOAD&name=${COLLECTION}"
}


function update_all {
    $DOCKER exec -t ${SOLR_CONTAINER}_${SOLR_PORT} update_collections_full.sh
}


function die {
    echo $1
    exit 1
}


function install {
    if [ -n "$($DOCKER volume ls -q -f name="${SOLR_DATA_VOLUME}")" ]
    then
        die "Docker volume ${SOLR_DATA_VOLUME} already exists. Please remove it first if you want to reinstall"
    fi
    TELLUSR_RUN_EXTRA_VOLUMES="-v ${SOLR_DATA_VOLUME}:/var/solr"
    run
    $DOCKER cp $PROJECT_HOME/zoo.cfg ${SOLR_CONTAINER}_${SOLR_PORT}:/var/solr/data/zoo.cfg
    $DOCKER exec -u 0 -t ${SOLR_CONTAINER}_${SOLR_PORT} chown solr.solr /var/solr/data/zoo.cfg
    stop
}

function help {
    CMD=${BASH_SOURCE[0]}
    echo "$CMD volume_drop run migrate pull update demo_migrate console stop"
    echo "$CMD test|test_cloud|demo"
    echo "$CMD tellusr_install_test_mode|tellusr_install_prod_mode|tellusr"
    echo "$CMD install|uninstall|prod_run|prod_stop|prod_zookeeper_run|prod_zookeeper_stop"
    echo "$CMD update|update_all"
}

function cloud {
    if [[ -n "$INSTALL_CLOUD_SERVERS" ]]
    then
        for SERVER in ${INSTALL_CLOUD_SERVERS}
        do
            let ZOOKEEPER_ID=ZOOKEEPER_ID+1
            echo $SERVER
            CMD="ZOOKEEPER_ID=$ZOOKEEPER_ID tellusr-solr-template/bin/ttb $@"
            trace ssh -t tellusr@${SERVER} $CMD
        done
    fi
}


# Check that docker is installed
assume_docker

# Default command
if [ "$#" == "0" ]; then
    set -- $DEFAULT_TTB_COMMAND
fi

# Multiple commands
while (( "$#" ))
do
    ARG="$1" && shift || die "Missing argument"
    case $ARG in
        uninstall)
            SOLR_DATA_VOLUME=${INSTALL_SOLR_DATA_VOLUME:-$SOLR_DATA_VOLUME}
            if [ ! $($DOCKER volume ls -q -f name="${SOLR_DATA_VOLUME}") ]
            then
                die "Docker volume ${SOLR_DATA_VOLUME} does not exist, nothing to uninstall."
            fi
            prod_stop
            volume_drop
            ;;
        
        install)
            if [[ -e zoo.cfg ]]
            then
                if [[ -z $ZOOKEEER_ID ]]
                then
                    export ZOOKEEPER_ID="$1" && shift || die "Cloud mode needs a zookeeper id"
                fi
                [[ $ZOOKEEPER_ID =~ ^[0-9]+ ]] || die "Zookeeper id '$ZOOKEEPER_ID' should be an integer"
            fi
	    if [ -n "$INSTALL_CENTRAL_URL" ]
	    then
		CENTRAL_URL="$INSTALL_CENTRAL_URL"
	    fi
            SOLR_DATA_VOLUME=${INSTALL_SOLR_DATA_VOLUME:-$SOLR_DATA_VOLUME}
            install
            ;;

        inspect)
            TELLUSR_RUN_PARAMS=bash
            TELLUSR_RUN_MODE_OPTIONS="-it --rm"
            SOLR_DATA_VOLUME=${INSTALL_SOLR_DATA_VOLUME:-$SOLR_DATA_VOLUME}
            run
            ;;

        tellusr_install_prod_mode)
            if [[ -n "$MAIN_CLIENT" ]]
            then
                curl -s https://dist.tellusr.com/tellusr.sh | bash -s prod_mode
                curl -s https://dist.tellusr.com/tellusr.sh | bash -s upgrade
            fi
            ;;

        tellusr_install_test_mode)
            if [[ -n "$MAIN_CLIENT" ]]
            then
                curl -s https://dist.tellusr.com/tellusr.sh | bash -s test_mode
                curl -s https://dist.tellusr.com/tellusr.sh | bash -s upgrade
            fi
            ;;

        tellusr)
            COMMAND="$1" && shift
            if [[ -n "$MAIN_CLIENT" ]]
            then
                curl -s https://dist.tellusr.com/tellusr.sh | bash -s ${COMMAND:-"help"}
            fi
            ;;

        create)
            NEW_COLLECTION="$1" && shift || die "Create needs a new core name"
            if [[ -n "$MAIN_CLIENT" ]]
            then
                create $NEW_COLLECTION
            fi
            ;;

        update)
            COLLECTION="$1" && shift || die "Update needs a collection name"
            if [[ -n "$MAIN_CLIENT" ]]
            then
                assume_configset
                update $COLLECTION
            fi
            ;;
        
        update_all)
            if [[ -n "$MAIN_CLIENT" ]]
            then
                assume_configset
                update_all
            fi
            ;;
        
        pull)
            git_pull
            docker_pull
            ;;
        
        git_pull)
            git_pull
            ;;
        
        docker_pull)
            docker_pull
            ;;
        
	run)
            # Output an error if no configset exists
            assume_configset
            # Start the docker container with solr
	    run
	    ;;

	prod_run)
            # Run the container in prod mode. In this mode the container
            # will restart after reboot of the machine
            prod_run
	    ;;

	prod_stop)
            # Run the container in prod mode. In this mode the container
            # will restart after reboot of the machine
            prod_stop
	    ;;

	prod_pull)
            # Update to the latest version of the docker container
            # and restart it in prod mode
            docker_pull
            prod_stop
            prod_run
	    ;;

	stop)
            # Stop docker container
	    stop
	    ;;

	migrate)
            # Create collections and migrate data (if any)
            if [[ -n "$MAIN_CLIENT" ]]
            then
	        migrate
            fi
	    ;;

        migrate_data)
            # Only migrate data
            if [[ -n "$MAIN_CLIENT" ]]
            then
                _migrate_data $SOLR_HOST $PORT
            fi
            ;;

        stress_test)
            # Only migrate data
            stress_test $SOLR_HOST $PORT
            ;;

	demo_migrate)
            # Migrate demo data into collections
            # Only migrate data
            if [[ -n "$MAIN_CLIENT" ]]
            then
	        demo_migrate
            fi
	    ;;

	console)
            # Enter a bash console for the solr docker container
            if [[ -n "$MAIN_CLIENT" ]]
            then
	        console
            fi
	    ;;

	volume_drop)
            # Drop volume with solr data
	    volume_drop
	    ;;

	wait_for_solr)
            wait_for_solr
	    ;;

        cloud)
            cloud $@
            exit
            ;;

	demo)
            volume_drop
            # Do not run demo in cloud mode
            TELLUSR_RUN_PARAMS=""
	    run
            # Create and populate tellusr-demo core
            demo_create_core
            console
            stop
	    ;;

	test)
            assume_configset
	    run
            migrate
            console
            stop
	    ;;

        zookeeper_run)
            zookeeper_run
            ;;

        zookeeper_stop)
            zookeeper_stop
            ;;

        prod_zookeeper_run)
            prod_zookeeper_run
            ;;

        prod_zookeeper_stop)
            zookeeper_stop
            ;;

	test_cloud)
            assume_configset
            echo "Project: $PROJECT"
            mkdir -p configset
            # echo_zoo_cfg > $PROJECT_HOME/configset/zoo.cfg

            export TELLUSR_RUN_PARAMS="-c -z localhost:2181"
            let SOLR_PORT2=SOLR_PORT+1
            let SOLR_PORT3=SOLR_PORT+2
            ZOO_SERVERS="localhost:2888:3888"
            ENV2="env SOLR_PORT_OVERRIDE=$SOLR_PORT2 ZOOKEEPER_ID=2 ZOOKEEPER_PORT=2181"
            ENV3="env SOLR_PORT_OVERRIDE=$SOLR_PORT3 ZOOKEEPER_ID=3 ZOOKEEPER_PORT=2181"
            
            CMD=${BASH_SOURCE[0]}
            stop; $ENV2 $CMD stop; $ENV3 $CMD stop
            zookeeper_stop

            trace zookeeper_run
            run; $ENV2 $CMD run; $ENV3 $CMD run

            migrate
            console
            stop; $ENV2 $CMD stop; $ENV3 $CMD stop
            zookeeper_stop
            
            # rm $PROJECT_HOME/configset/zoo.cfg
	    ;;

        help)
            help
            ;;
        *)
            echo "Unrecoginzed command $ARG"
            help
            exit 1
            ;;
    esac
done
